{
	"info": {
		"_postman_id": "451f0091-0c77-40f7-ab53-722dae04b637",
		"name": "Lesson 4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26907224"
	},
	"item": [
		{
			"name": "Get Lists",
			"item": [
				{
					"name": "Get Lists - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true",
									"disabled": true
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get archived  Lists - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list?archived=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true"
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lists with invalid token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Token invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Token invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization_inv}}",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true",
									"disabled": true
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lists without Authorization token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Authorization header required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Authorization header required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true",
									"disabled": true
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lists with empty folder_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Folder ID invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Folder ID invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder//list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true",
									"disabled": true
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lists with invalid folder_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Team not authorized\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id_inv}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id_inv}}",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true",
									"disabled": true
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lists with incorrect folder_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Folder ID invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Folder ID invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/folder/folder_id/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"folder_id",
								"list"
							],
							"query": [
								{
									"key": "archived",
									"value": "true",
									"disabled": true
								},
								{
									"key": "archived",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create List",
			"item": [
				{
					"name": "Create List - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"    var jsonData = pm.response.json();",
									"    var id = jsonData.id",
									"",
									"pm.environment.set(\"list_id\", id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created list by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check list_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql( pm.environment.get (\"list_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List with invalid token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Token invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Token invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization_inv}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List without Authorization token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Authorization header required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Authorization header required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List with empty folder_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder//list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List with invalid folder_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Team not authorized\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id_inv}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id_inv}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List with incorrect folder_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Folder ID invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Folder ID invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/folder_id/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"folder_id",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List with the same name - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - List name taken\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"List name taken\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": \"Project 1\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List without name - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - List Name Invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"List Name Invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create List with invalid name - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"name\": name_list,\n  \"content\": \"{{$randomLoremText}}\",\n  \"priority\": 1,\n  \"status\": \"red\",\n  \"due_date_time\": true,\n  \"due_date\": 1567780450202\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/folder/{{folder_id}}/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"folder",
								"{{folder_id}}",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get List",
			"item": [
				{
					"name": "Get List - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check list_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql( pm.environment.get (\"list_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List with invalid token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Token invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Token invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization_inv}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List without Authorization token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Authorization header required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Authorization header required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List with empty list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string - Route not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Route not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List with invalid list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Team not authorized\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id_inv}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id_inv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List with incorrect list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - validateListIDEx List ID invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/list_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"list_id"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update List",
			"item": [
				{
					"name": "Update List - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"    var jsonData = pm.response.json();",
									"    var name = jsonData.name",
									"    var content = jsonData.content",
									"",
									"pm.environment.set(\"list_name\", name);",
									"pm.environment.set(\"list_content\", content);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated list by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check list_name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql( pm.environment.get (\"list_name\"));",
									"});",
									"",
									"pm.test(\"Check list_content\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.content).to.eql( pm.environment.get (\"list_content\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List without name - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"    var jsonData = pm.response.json();",
									"    var content = jsonData.content",
									"",
									"pm.environment.set(\"list_content\", content);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated list_content by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check list_content\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.content).to.eql( pm.environment.get (\"list_content\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List with invalid token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Token invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Token invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization_inv}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List without Authorization token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Authorization header required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Authorization header required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List with empty list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List with invalid list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Team not authorized\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id_inv}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id_inv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List with incorrect list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - validateListIDEx List ID invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"{{$randomProductName}}\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/list_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"list_id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List with the same name - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - List name taken\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"List name taken\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": \"Project 1\",\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update List with invalid name - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"due_date_time\": true,\n  \"unset_status\": true,\n  \"name\": Project 1,\n  \"content\": \"{{$randomLoremText}}\",\n  \"due_date\": 1567780450202,\n  \"priority\": 2,\n  \"status\": \"red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete List",
			"item": [
				{
					"name": "Delete List with invalid token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Token invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Token invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization_inv}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List without Authorization token - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - Authorization header required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Authorization header required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List with empty list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List with invalid list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string - Team not authorized\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Team not authorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id_inv}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id_inv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List with incorrect list_id - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string - validateListIDEx List ID invalid\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"validateListIDEx List ID invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/list_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"list_id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete List - positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Redelete List - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string - List not exist\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"List not exist\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check deleted list by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string - List not exist\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"List not exist\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/v2/list/{{list_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"list",
								"{{list_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}